Cypher

Delete Node 0:
	start n=node(0) delete n

Get node by name 1:
	start n=node(*) where n.name="firswood" return n

Get node by name 2:
	start n=node(*) where HAS(n.name) AND n.name="firswood" return n

Get node by name 3:
	start n=node:tramStations(name="firswood") return n
	start n=node:tramStations("name:firswood") return n

Least cost Path:

START  startNode=node:tramStations(name='firswood'),
       endNode=node:tramStations(name='media city')
	MATCH  p=(startNode)-[:GOES_TO*]->(endNode)
	RETURN p AS shortestPath, 
       reduce(weight=0, r in relationships(p) : weight+r.duration) AS totalWeight
       ORDER BY totalWeight ASC
       LIMIT 1


Gremlin

Get node 1:
	g.v(1)
	g.v(1).name
	g.v(1).map()


REST

Least cost Path:
	HEADERS:
		Accept: application/json; charset=UTF-8
		Content-Type: application/json	

	BODY:
	{
	  	"to" : "http://localhost:7474/db/data/node/5",
		"cost_property" : "duration",
	  	"relationships" : {
	    "type" : "GOES_TO",
	    "direction" : "out"
	  },
	  "algorithm" : "dijkstra"
	}

URI : http://localhost:7474/db/data/cypher
Cypher least cost path:
{
  "query" : "START  startNode=node:tramStations(name={startName}),endNode=node:tramStations(name={endName}) MATCH  p=(startNode)-[:GOES_TO*]->(endNode) RETURN p AS shortestPath,  reduce(weight=0, r in relationships(p) : weight+r.duration) AS totalWeight ORDER BY totalWeight ASC LIMIT 1",
  "params" : {
    "startName" : "firswood",
    "endName" : "media city"
  }
}


